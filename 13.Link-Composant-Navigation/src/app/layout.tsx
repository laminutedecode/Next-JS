import './index.css'
import Navigation from "@/components/Navigation"
import Footer from "@/components/Footer"


// Il est important de noter que la balise <title> est unique par page, donc si vous avez plusieurs pages dans votre application Next.js, vous devrez utiliser le composant Head pour chaque page individuelle afin de définir des titres uniques pour chacune d'elles.

// il y a certaines pratiques recommandées et des règles à suivre lors de la définition de la balise <title> pour assurer une bonne expérience utilisateur et une meilleure optimisation pour les moteurs de recherche (SEO) :

// Soyez descriptif et pertinent : Le titre de la page doit être descriptif et pertinent par rapport au contenu de la page. Il devrait idéalement contenir des mots-clés importants qui résument le contenu de la page.

// Limitez la longueur : Les titres de page trop longs peuvent être tronqués dans les résultats de recherche. Essayez de maintenir le titre de la page entre 50 et 60 caractères pour une meilleure lisibilité.

// Utilisez des titres uniques : Chaque page de votre site Web devrait avoir un titre unique. Cela aide les utilisateurs à identifier facilement le contenu de chaque page et améliore également le référencement car les moteurs de recherche préfèrent les titres uniques.

// Intégrez des mots-clés : Incluez des mots-clés pertinents dans le titre de la page pour améliorer le classement dans les résultats de recherche. Cependant, évitez le bourrage de mots-clés, car cela peut avoir un effet négatif sur votre référencement.

// Pensez à l'expérience utilisateur : Le titre de la page doit être convaincant pour inciter les utilisateurs à cliquer. Assurez-vous qu'il communique clairement le contenu et l'objectif de la page.

// Évitez le duplicata de contenu : Assurez-vous que chaque page a un titre unique pour éviter le contenu en double. Cela signifie qu'il est important de ne pas utiliser le même titre pour plusieurs pages, sauf si cela est justifié par le contenu.

export const metadata = {
  title: 'Next.js',
  description: 'Generated by Next.js',
  absolute: "",
  default: "Next JS - Formation",
  template: "%s | La Minute De Code ",
}

// Par exemple, absolute pourrait être utilisé pour spécifier un chemin absolu vers une ressource, default pourrait être un paramètre par défaut, et template pourrait être une référence à un modèle utilisé pour afficher la page.



export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body>
        <Navigation />
        {children}
        <Footer />
        </body>
    </html>
  )
}
